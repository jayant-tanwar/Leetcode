/*Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.

Follow up:
Could you solve it in linear time?

Example:

Input: nums = [1,3,-1,-3,5,3,6,7], and k = 3
Output: [3,3,5,5,6,7] 
Explanation: 

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
 

Constraints:

1 <= nums.length <= 10^5
-10^4 <= nums[i] <= 10^4
1 <= k <= nums.length
*/

//Java Solution in n*(logn + logn) below
class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        
            int[] Ans=new int[nums.length-k+1];
	        int index=0;
	        PriorityQueue<int[]> PQ=new PriorityQueue<int[]>((a,b) -> Integer.compare(b[0],a[0]));
	        int i=0;
	        for(i=0;i<k;i++){
	            int[] A={nums[i],i};
	            PQ.offer(A);
	        }        
	        i--;
            while(i<nums.length){
	        	//System.out.println(PQ.peek()[0]+" "+i+" "+(i-k));
	        	while(PQ.peek()[1]<=i-k){
	                PQ.poll();
	            }
	        	Ans[index++]=PQ.peek()[0];
	        	i++;
	        	
	        	if(i<nums.length) {
	        		int[] B= {nums[i],i};
	        		PQ.offer(B);
	        	}
	            
	        }
        return Ans;
    }
}
//However there is a better code using Deque in Java
