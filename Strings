/*
Question 1:  76. Minimum Window Substring
Approach: Sliding Window

The question asks us to return the minimum window from the string S which has all the characters of the string T. Let us call a window desirable if it has all the characters from T.
We can use a simple sliding window approach to solve this problem.
In any sliding window based problem we have two pointers. One rightright pointer whose job is to expand the current window and then we have the leftleft pointer whose job is to contract a given window. 
At any point in time only one of these pointers move and the other one remains fixed.
The solution is pretty intuitive. We keep expanding the window by moving the right pointer. When the window has all the desired characters, we contract (if possible) and save the smallest window till now.
The answer is the smallest desirable window.
For eg. S = "ABAACBAB" T = "ABC". Then our answer window is "ACB" and shown below is one of the possible desirable windows.

Algorithm
We start with two pointers, leftleft and rightright initially pointing to the first element of the string S.
We use the rightright pointer to expand the window until we get a desirable window i.e. a window that contains all of the characters of T.
Once we have a window with all the characters, we can move the left pointer ahead one by one. If the window is still a desirable one we keep on updating the minimum window size.
If the window is not desirable any more, we repeat step step2 onwards.

*/

class Solution {
    public String minWindow(String s, String t) {
        //If you have the entire thing
        //You start reducing the entire thing
        //So how do you know if you have the entire thing
        HashMap<Character,Integer> Main=new HashMap<Character,Integer>();
        HashMap<Character,Integer> Actual=new HashMap<Character,Integer>();
        char[] tch=t.toCharArray();
        char[] sch=s.toCharArray();
        
        for(char ch:tch){
            if(Main.containsKey(ch)){
                Main.put(ch,Main.get(ch)+1);
            }
            else{
                Main.put(ch,1);
            }
            //Main.put(ch,Main.getOrDefault(ch,0)+1);
        }
        
        int counter=0;
        int total=Main.size();
        
        int i=0;
        int j=0;
        int r=Integer.MAX_VALUE;
        int l=0;
        
        while(j<s.length()){

            char ch=sch[j];
            
            if(Actual.containsKey(ch)){
                Actual.put(ch,Actual.get(ch)+1);
            }
            else{
                Actual.put(ch,1);
            }
            
            
            if(Main.containsKey(ch) && Main.get(ch).equals(Actual.get(ch)))
            {   
                
                counter++;
            }
            
        
            while(i<=j && counter==total){
                
                char Ch=sch[i];
                
                if(j-i<r-l){
                    r=j;
                    l=i;
                }
                //delete it now!
                int count=Actual.get(Ch);
                Actual.put(Ch,count-1);
                
                if(Main.containsKey(Ch) && (count-1<Main.get(Ch))){
                    counter--;
                }
                i++;
            }
            
            j++;

        }
        
        if(r-l>s.length()) return "";
        return s.substring(l,r+1);
    }
    
    
 
 ---------------------------------------------------------------------------------
 ---------------------------------------------------------------------------------
 
 /*
 
 Question 2: 3. Longest Substring Wihtout Repeating Characters
 Given a string, find the length of the longest substring without repeating characters
 
 e.g. 
Input: "pwwkew"
Output: 3

Algorithm:
Approach 1: Using HashSet<>();
in python
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        x=set()
        i=0
        j=0
        ans=0
        while(j<len(s)):
            ch=s[j]
            if(ch in x):
                x.remove(s[i])
                i+=1
            else:
                x.add(s[j])
                j+=1
                ans=max(ans,j-i)
        
        return ans
/*
    public int lengthOfLongestSubstring(String s) {
        HashSet<Character> S=new HashSet<Character>();
        int i=0;
        int j=0;
        int ans=0;
        while(j<s.length()){
            if(S.contains(s.charAt(j))){
                S.remove(s.charAt(i++));
            }
            else{
                S.add(s.charAt(j++));
                ans=Math.max(ans,j-i);
            }
        
        }
        return ans;
    
    
  /*better approach using HashMap<>
  */
          // HashMap<Character,Integer> M=new HashMap<Character,Integer>();
        // int i=0;
        // int j=0;
        // int ans=0;
        // while(j<s.length()){
        //     if(M.containsKey(s.charAt(j))){
        //         int where=M.get(s.charAt(j)).intValue();
        //         i=Math.max(i,where+1);
        //     }
        //     M.put(s.charAt(j),j);
        //     ans=Math.max(ans,j-i+1);
        //     j++;
        // }
        // return ans;
  
  
  /*fastest solution on the planet:
  int[26] for Letters 'a' - 'z' or 'A' - 'Z'
int[128] for ASCII
int[256] for Extended ASCII*/

         int[] Table=new int[256];
        int i=0;
        int j=0;
        int ans=0;
        while(j<s.length()){
            i=Math.max(i,Table[s.charAt(j)]);
            Table[s.charAt(j)]=j+1;
            ans=Math.max(ans,j-i+1);
           // System.out.println(j+" "+i);
            j++;
        }
        return ans;
 
 ---------------------------------------------------------------------------------
 ---------------------------------------------------------------------------------

 
 
 
